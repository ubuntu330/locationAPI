# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class UserInfo(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, address: Address=None, access_point_id: AccessPointId=None, zone_id: ZoneId=None, resource_url: ResourceURL=None, location_info: LocationInfo=None, context_location_info: ContextLocationInfo=None, ancillary_info: AncillaryInfo=None):  # noqa: E501
        """UserInfo - a model defined in Swagger

        :param address: The address of this UserInfo.  # noqa: E501
        :type address: Address
        :param access_point_id: The access_point_id of this UserInfo.  # noqa: E501
        :type access_point_id: AccessPointId
        :param zone_id: The zone_id of this UserInfo.  # noqa: E501
        :type zone_id: ZoneId
        :param resource_url: The resource_url of this UserInfo.  # noqa: E501
        :type resource_url: ResourceURL
        :param location_info: The location_info of this UserInfo.  # noqa: E501
        :type location_info: LocationInfo
        :param context_location_info: The context_location_info of this UserInfo.  # noqa: E501
        :type context_location_info: ContextLocationInfo
        :param ancillary_info: The ancillary_info of this UserInfo.  # noqa: E501
        :type ancillary_info: AncillaryInfo
        """
        self.swagger_types = {
            'address': Address,
            'access_point_id': AccessPointId,
            'zone_id': ZoneId,
            'resource_url': ResourceURL,
            'location_info': LocationInfo,
            'context_location_info': ContextLocationInfo,
            'ancillary_info': AncillaryInfo
        }

        self.attribute_map = {
            'address': 'address',
            'access_point_id': 'accessPointId',
            'zone_id': 'zoneId',
            'resource_url': 'resourceURL',
            'location_info': 'locationInfo',
            'context_location_info': 'contextLocationInfo',
            'ancillary_info': 'ancillaryInfo'
        }

        self._address = address
        self._access_point_id = access_point_id
        self._zone_id = zone_id
        self._resource_url = resource_url
        self._location_info = location_info
        self._context_location_info = context_location_info
        self._ancillary_info = ancillary_info

    @classmethod
    def from_dict(cls, dikt) -> 'UserInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UserInfo of this UserInfo.  # noqa: E501
        :rtype: UserInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self) -> Address:
        """Gets the address of this UserInfo.


        :return: The address of this UserInfo.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address: Address):
        """Sets the address of this UserInfo.


        :param address: The address of this UserInfo.
        :type address: Address
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def access_point_id(self) -> AccessPointId:
        """Gets the access_point_id of this UserInfo.


        :return: The access_point_id of this UserInfo.
        :rtype: AccessPointId
        """
        return self._access_point_id

    @access_point_id.setter
    def access_point_id(self, access_point_id: AccessPointId):
        """Sets the access_point_id of this UserInfo.


        :param access_point_id: The access_point_id of this UserInfo.
        :type access_point_id: AccessPointId
        """
        if access_point_id is None:
            raise ValueError("Invalid value for `access_point_id`, must not be `None`")  # noqa: E501

        self._access_point_id = access_point_id

    @property
    def zone_id(self) -> ZoneId:
        """Gets the zone_id of this UserInfo.


        :return: The zone_id of this UserInfo.
        :rtype: ZoneId
        """
        return self._zone_id

    @zone_id.setter
    def zone_id(self, zone_id: ZoneId):
        """Sets the zone_id of this UserInfo.


        :param zone_id: The zone_id of this UserInfo.
        :type zone_id: ZoneId
        """
        if zone_id is None:
            raise ValueError("Invalid value for `zone_id`, must not be `None`")  # noqa: E501

        self._zone_id = zone_id

    @property
    def resource_url(self) -> ResourceURL:
        """Gets the resource_url of this UserInfo.


        :return: The resource_url of this UserInfo.
        :rtype: ResourceURL
        """
        return self._resource_url

    @resource_url.setter
    def resource_url(self, resource_url: ResourceURL):
        """Sets the resource_url of this UserInfo.


        :param resource_url: The resource_url of this UserInfo.
        :type resource_url: ResourceURL
        """
        if resource_url is None:
            raise ValueError("Invalid value for `resource_url`, must not be `None`")  # noqa: E501

        self._resource_url = resource_url

    @property
    def location_info(self) -> LocationInfo:
        """Gets the location_info of this UserInfo.


        :return: The location_info of this UserInfo.
        :rtype: LocationInfo
        """
        return self._location_info

    @location_info.setter
    def location_info(self, location_info: LocationInfo):
        """Sets the location_info of this UserInfo.


        :param location_info: The location_info of this UserInfo.
        :type location_info: LocationInfo
        """

        self._location_info = location_info

    @property
    def context_location_info(self) -> ContextLocationInfo:
        """Gets the context_location_info of this UserInfo.


        :return: The context_location_info of this UserInfo.
        :rtype: ContextLocationInfo
        """
        return self._context_location_info

    @context_location_info.setter
    def context_location_info(self, context_location_info: ContextLocationInfo):
        """Sets the context_location_info of this UserInfo.


        :param context_location_info: The context_location_info of this UserInfo.
        :type context_location_info: ContextLocationInfo
        """

        self._context_location_info = context_location_info

    @property
    def ancillary_info(self) -> AncillaryInfo:
        """Gets the ancillary_info of this UserInfo.


        :return: The ancillary_info of this UserInfo.
        :rtype: AncillaryInfo
        """
        return self._ancillary_info

    @ancillary_info.setter
    def ancillary_info(self, ancillary_info: AncillaryInfo):
        """Sets the ancillary_info of this UserInfo.


        :param ancillary_info: The ancillary_info of this UserInfo.
        :type ancillary_info: AncillaryInfo
        """

        self._ancillary_info = ancillary_info
