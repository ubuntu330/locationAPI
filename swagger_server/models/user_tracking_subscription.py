# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class UserTrackingSubscription(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, client_correlator: ClientCorrelator=None, callback_reference: CallbackReference=None, address: Address=None, user_event_criteria: UserEventCriteria=None, resource_url: ResourceURL=None):  # noqa: E501
        """UserTrackingSubscription - a model defined in Swagger

        :param client_correlator: The client_correlator of this UserTrackingSubscription.  # noqa: E501
        :type client_correlator: ClientCorrelator
        :param callback_reference: The callback_reference of this UserTrackingSubscription.  # noqa: E501
        :type callback_reference: CallbackReference
        :param address: The address of this UserTrackingSubscription.  # noqa: E501
        :type address: Address
        :param user_event_criteria: The user_event_criteria of this UserTrackingSubscription.  # noqa: E501
        :type user_event_criteria: UserEventCriteria
        :param resource_url: The resource_url of this UserTrackingSubscription.  # noqa: E501
        :type resource_url: ResourceURL
        """
        self.swagger_types = {
            'client_correlator': ClientCorrelator,
            'callback_reference': CallbackReference,
            'address': Address,
            'user_event_criteria': UserEventCriteria,
            'resource_url': ResourceURL
        }

        self.attribute_map = {
            'client_correlator': 'clientCorrelator',
            'callback_reference': 'callbackReference',
            'address': 'address',
            'user_event_criteria': 'userEventCriteria',
            'resource_url': 'resourceURL'
        }

        self._client_correlator = client_correlator
        self._callback_reference = callback_reference
        self._address = address
        self._user_event_criteria = user_event_criteria
        self._resource_url = resource_url

    @classmethod
    def from_dict(cls, dikt) -> 'UserTrackingSubscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UserTrackingSubscription of this UserTrackingSubscription.  # noqa: E501
        :rtype: UserTrackingSubscription
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_correlator(self) -> ClientCorrelator:
        """Gets the client_correlator of this UserTrackingSubscription.


        :return: The client_correlator of this UserTrackingSubscription.
        :rtype: ClientCorrelator
        """
        return self._client_correlator

    @client_correlator.setter
    def client_correlator(self, client_correlator: ClientCorrelator):
        """Sets the client_correlator of this UserTrackingSubscription.


        :param client_correlator: The client_correlator of this UserTrackingSubscription.
        :type client_correlator: ClientCorrelator
        """

        self._client_correlator = client_correlator

    @property
    def callback_reference(self) -> CallbackReference:
        """Gets the callback_reference of this UserTrackingSubscription.


        :return: The callback_reference of this UserTrackingSubscription.
        :rtype: CallbackReference
        """
        return self._callback_reference

    @callback_reference.setter
    def callback_reference(self, callback_reference: CallbackReference):
        """Sets the callback_reference of this UserTrackingSubscription.


        :param callback_reference: The callback_reference of this UserTrackingSubscription.
        :type callback_reference: CallbackReference
        """
        if callback_reference is None:
            raise ValueError("Invalid value for `callback_reference`, must not be `None`")  # noqa: E501

        self._callback_reference = callback_reference

    @property
    def address(self) -> Address:
        """Gets the address of this UserTrackingSubscription.


        :return: The address of this UserTrackingSubscription.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address: Address):
        """Sets the address of this UserTrackingSubscription.


        :param address: The address of this UserTrackingSubscription.
        :type address: Address
        """
        if address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def user_event_criteria(self) -> UserEventCriteria:
        """Gets the user_event_criteria of this UserTrackingSubscription.


        :return: The user_event_criteria of this UserTrackingSubscription.
        :rtype: UserEventCriteria
        """
        return self._user_event_criteria

    @user_event_criteria.setter
    def user_event_criteria(self, user_event_criteria: UserEventCriteria):
        """Sets the user_event_criteria of this UserTrackingSubscription.


        :param user_event_criteria: The user_event_criteria of this UserTrackingSubscription.
        :type user_event_criteria: UserEventCriteria
        """

        self._user_event_criteria = user_event_criteria

    @property
    def resource_url(self) -> ResourceURL:
        """Gets the resource_url of this UserTrackingSubscription.


        :return: The resource_url of this UserTrackingSubscription.
        :rtype: ResourceURL
        """
        return self._resource_url

    @resource_url.setter
    def resource_url(self, resource_url: ResourceURL):
        """Sets the resource_url of this UserTrackingSubscription.


        :param resource_url: The resource_url of this UserTrackingSubscription.
        :type resource_url: ResourceURL
        """

        self._resource_url = resource_url
